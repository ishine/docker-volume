<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{6AA71125-14EE-396E-9725-D8ACD52CA285}</ProjectGuid>
    <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>
    <Keyword>Win32Proj</Keyword>
    <Platform>x64</Platform>
    <ProjectName>lnn</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v141</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v141</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v141</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v141</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\docker-volume\vs-light-nn\lib\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">lnn.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">lnn</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\docker-volume\vs-light-nn\lib\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">lnn.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">lnn</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\docker-volume\vs-light-nn\lib\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">lnn.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">lnn</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\docker-volume\vs-light-nn\lib\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">lnn.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">lnn</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.lib</TargetExt>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Debug/</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;CMAKE_INTDIR="Debug";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;CMAKE_INTDIR=\"Debug\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Release/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR="Release";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR=\"Release\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>MinSizeRel/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR="MinSizeRel";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR=\"MinSizeRel\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>RelWithDebInfo/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR="RelWithDebInfo";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;CMAKE_INTDIR=\"RelWithDebInfo\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\docker-volume\vs-light-nn;D:\docker-volume\light-nn\include;D:\docker-volume\light-nn\third_party;D:\docker-volume\light-nn\third_party\openblas;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="D:\docker-volume\light-nn\CMakeLists.txt">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule D:/docker-volume/light-nn/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
D:\programfile\cmake\bin\cmake.exe -SD:/docker-volume/light-nn -BD:/docker-volume/vs-light-nn --check-stamp-file D:/docker-volume/vs-light-nn/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\docker-volume\light-nn\config.h.in;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindOpenMP.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageMessage.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\docker-volume\vs-light-nn\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule D:/docker-volume/light-nn/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
D:\programfile\cmake\bin\cmake.exe -SD:/docker-volume/light-nn -BD:/docker-volume/vs-light-nn --check-stamp-file D:/docker-volume/vs-light-nn/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\docker-volume\light-nn\config.h.in;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindOpenMP.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageMessage.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\docker-volume\vs-light-nn\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule D:/docker-volume/light-nn/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
D:\programfile\cmake\bin\cmake.exe -SD:/docker-volume/light-nn -BD:/docker-volume/vs-light-nn --check-stamp-file D:/docker-volume/vs-light-nn/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\docker-volume\light-nn\config.h.in;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindOpenMP.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageMessage.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\docker-volume\vs-light-nn\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule D:/docker-volume/light-nn/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
D:\programfile\cmake\bin\cmake.exe -SD:/docker-volume/light-nn -BD:/docker-volume/vs-light-nn --check-stamp-file D:/docker-volume/vs-light-nn/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\docker-volume\light-nn\config.h.in;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeCXXCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeRCCompiler.cmake;D:\docker-volume\vs-light-nn\CMakeFiles\3.15.0-rc4\CMakeSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCXXInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeCommonLanguageInclude.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeGenericSystem.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeInitializeConfigs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeLanguageInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeParseImplicitLinkInfo.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeRCInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInformation.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\CMakeSystemSpecificInitialize.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\CMakeCommonCompilerMacros.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Compiler\MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindOpenMP.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageHandleStandardArgs.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\FindPackageMessage.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-C.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC-CXX.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows-MSVC.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\Windows.cmake;D:\programfile\cmake\share\cmake-3.15\Modules\Platform\WindowsPaths.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\docker-volume\vs-light-nn\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="..\light-nn\src\operators\conv2d.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\executor.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\net.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\attention.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\concat.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\conv1d.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\crf.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\eltwise.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\embedding.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\gelu.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\gru.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\linear.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\lookup-table.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\lstm.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\pooling1d.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\reduction.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\relu.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\reverse.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\rnn-adapter.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\scale.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\sigmoid.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\softmax.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\tanh.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\weight-wrapper.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\operators\weighted-sum.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\tensor.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\src\utils\math-functions.cc" />
    <ClCompile Include="D:\docker-volume\light-nn\third_party\json\jsoncpp.cc" />
    <ClInclude Include="..\light-nn\include\operators\conv2d.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\executor.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\light-nn.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\net.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operator-factory.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operator.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\attention.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\concat.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\conv1d.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\crf.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\eltwise.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\embedding.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\gelu.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\gru.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\linear.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\lookup-table.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\lstm.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\pooling1d.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\reduction.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\relu.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\reverse.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\rnn-adapter.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\scale.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\sigmoid.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\softmax.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\tanh.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\weight-wrapper.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\operators\weighted-sum.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\tensor.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\utils\log.h" />
    <ClInclude Include="D:\docker-volume\light-nn\include\utils\math-functions.h" />
    <ClInclude Include="D:\docker-volume\light-nn\third_party\json\json-forwards.h" />
    <ClInclude Include="D:\docker-volume\light-nn\third_party\json\json.h" />
    <ClInclude Include="D:\docker-volume\light-nn\third_party\openblas\cblas.h" />
    <ClInclude Include="D:\docker-volume\light-nn\third_party\openblas\openblas_config.h" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="D:\docker-volume\vs-light-nn\ZERO_CHECK.vcxproj">
      <Project>{FE0345B2-BA53-3E0F-AE6C-16E61C44726A}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>